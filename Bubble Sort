//////bubble Sort//////

void swap( int &lhs, int &rhs );

void bubleSort(int a[], int n) { bool sorted = false;
int last = n-1;
for (int i = 0; (i < last) && !sorted; i++){
sorted = true;
for (int j=last; j > i; j--) if (a[j-1] > a[j]{
swap(a[j],a[j-1]);
sorted = false; 
}
}
}

void swap( int &lhs, int &rhs ){ int tmp = lhs;
lhs = rhs; rhs = tmp;
}
/////Bubble Sort Tick Function////////
int calculateTicks(int arr[], int n) 
{ int ticks = 0;  for (int i = 0; i < n - 1; i++) 
{ bool swapped = false;
for (int j = 0; j < n - i - 1; j++) 
{ ticks++; 
 if (arr[j] > arr[j + 1]) 
{ swap(arr[j], arr[j + 1]); ticks++; 
 swapped = true; }
} 
if (!swapped) break; 
 } 
return ticks; } 
int main() 
{ int originalArray[] = {23, 78, 45, 8, 32, 56}; 
int n = sizeof(originalArray) / sizeof(originalArray[0]); 
int arr[n]; 
Tick Function

// Worst Case:
  copy(begin(originalArray), end(originalArray), arr); 
 sort(arr, arr + n, greater<int>()); 
 cout << "Ticks (Worst Case): " << calculateTicks(arr, n) << endl; 
// Best Case:
 copy(begin(originalArray), end(originalArray), arr); 
 sort(arr, arr + n); 

/cout << "Ticks (Best Case): " << calculateTicks(arr, n) << endl; 
// Average Case:
copy(begin(originalArray), end(originalArray), arr); 
 cout << "Ticks (Average Case): " << calculateTicks(arr, n) << endl; 

////////Bubble sort Time Calculation Function for all cases///////////


best_case = [1, 2, 3, 4, 5]
average_case = [3, 1, 4, 5, 2]
worst_case = [5, 4, 3, 2, 1]

print(f"Best-case time: {measure_time(best_case[:]):.6f} seconds")
print(f"Average-case time: {measure_time(average_case[:]):.6f} seconds")
print(f"Worst-case time: {measure_time(worst_case[:]):.6f} seconds")
